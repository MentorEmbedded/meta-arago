From 87e8845929c0f42ebaba4341580d58de19296ba3 Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Fri, 17 May 2019 16:59:38 -0400
Subject: [PATCH 3/4] hsr/prp: refactor common code

As there is similar code between the hsr and prp device support,
move them to a common file and re-use

Upstream-Status: Pending

Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
---
 ip/Makefile                |   5 +-
 ip/iplink_hsr.c            | 109 +++----------------------------------------
 ip/iplink_hsr_prp_common.c | 114 +++++++++++++++++++++++++++++++++++++++++++++
 ip/iplink_hsr_prp_common.h |  24 ++++++++++
 ip/iplink_prp.c            | 101 +++------------------------------------
 5 files changed, 155 insertions(+), 198 deletions(-)
 create mode 100644 ip/iplink_hsr_prp_common.c
 create mode 100644 ip/iplink_hsr_prp_common.h

diff --git a/ip/Makefile b/ip/Makefile
index c0efc3a..130e1ae 100644
--- a/ip/Makefile
+++ b/ip/Makefile
@@ -7,8 +7,9 @@ IPOBJ=ip.o ipaddress.o ipaddrlabel.o iproute.o iprule.o ipnetns.o \
     iplink_vlan.o link_veth.o link_gre.o iplink_can.o iplink_xdp.o \
     iplink_macvlan.o ipl2tp.o link_vti.o link_vti6.o \
     iplink_vxlan.o tcp_metrics.o iplink_ipoib.o ipnetconf.o link_ip6tnl.o \
-    link_iptnl.o link_gre6.o iplink_bond.o iplink_bond_slave.o iplink_hsr.o \
-    iplink_prp.o iplink_bridge.o iplink_bridge_slave.o ipfou.o iplink_ipvlan.o \
+    link_iptnl.o link_gre6.o iplink_bond.o iplink_bond_slave.o \
+    iplink_hsr_prp_common.o iplink_hsr.o iplink_prp.o iplink_bridge.o \
+    iplink_bridge_slave.o ipfou.o iplink_ipvlan.o \
     iplink_geneve.o iplink_vrf.o iproute_lwtunnel.o ipmacsec.o ipila.o \
     ipvrf.o iplink_xstats.o ipseg6.o iplink_netdevsim.o iplink_rmnet.o
 
diff --git a/ip/iplink_hsr.c b/ip/iplink_hsr.c
index 1281e09..2e83af0 100644
--- a/ip/iplink_hsr.c
+++ b/ip/iplink_hsr.c
@@ -11,15 +11,7 @@
  *		Based on iplink_vlan.c by Patrick McHardy <kaber@trash.net>
  */
 
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <sys/socket.h>  /* Needed by linux/if.h for some reason */
-#include <linux/if.h>
-#include <linux/if_arp.h>
-#include "rt_names.h"
-#include "utils.h"
-#include "ip_common.h"
+#include "iplink_hsr_prp_common.h"
 
 static void print_usage(FILE *f)
 {
@@ -46,100 +38,13 @@ static void usage(void)
 static int hsr_parse_opt(struct link_util *lu, int argc, char **argv,
 			 struct nlmsghdr *n)
 {
-	int ifindex;
-	unsigned char multicast_spec;
-	unsigned char protocol_version;
+	int ret;
 
-	while (argc > 0) {
-		if (matches(*argv, "supervision") == 0) {
-			NEXT_ARG();
-			if (get_u8(&multicast_spec, *argv, 0))
-				invarg("ADDR-BYTE is invalid", *argv);
-			addattr_l(n, 1024, IFLA_HSR_PRP_SF_MC_ADDR_LSB,
-				  &multicast_spec, 1);
-		} else if (matches(*argv, "version") == 0) {
-			NEXT_ARG();
-			if (!(get_u8(&protocol_version, *argv, 0) == 0 ||
-			      get_u8(&protocol_version, *argv, 0) == 1))
-				invarg("version is invalid", *argv);
-			addattr_l(n, 1024, IFLA_HSR_VERSION,
-				  &protocol_version, 1);
-		} else if (matches(*argv, "slave1") == 0) {
-			NEXT_ARG();
-			ifindex = ll_name_to_index(*argv);
-			if (ifindex == 0)
-				invarg("No such interface", *argv);
-			addattr_l(n, 1024, IFLA_HSR_PRP_SLAVE1, &ifindex, 4);
-		} else if (matches(*argv, "slave2") == 0) {
-			NEXT_ARG();
-			ifindex = ll_name_to_index(*argv);
-			if (ifindex == 0)
-				invarg("No such interface", *argv);
-			addattr_l(n, 1024, IFLA_HSR_PRP_SLAVE2, &ifindex, 4);
-		} else if (matches(*argv, "help") == 0) {
-			usage();
-			return -1;
-		} else {
-			fprintf(stderr, "hsr: what is \"%s\"?\n", *argv);
-			usage();
-			return -1;
-		}
-		argc--, argv++;
-	}
+	ret = hsr_prp_parse_opt(true, lu, argc, argv, n);
+	if (ret < 0)
+		usage();
 
-	return 0;
-}
-
-static void hsr_print_opt(struct link_util *lu, FILE *f, struct rtattr *tb[])
-{
-	SPRINT_BUF(b1);
-
-	if (!tb)
-		return;
-
-	if (tb[IFLA_HSR_PRP_SLAVE1] &&
-	    RTA_PAYLOAD(tb[IFLA_HSR_PRP_SLAVE1]) < sizeof(__u32))
-		return;
-	if (tb[IFLA_HSR_PRP_SLAVE2] &&
-	    RTA_PAYLOAD(tb[IFLA_HSR_PRP_SLAVE2]) < sizeof(__u32))
-		return;
-	if (tb[IFLA_HSR_PRP_SEQ_NR] &&
-	    RTA_PAYLOAD(tb[IFLA_HSR_PRP_SEQ_NR]) < sizeof(__u16))
-		return;
-	if (tb[IFLA_HSR_PRP_SF_MC_ADDR] &&
-	    RTA_PAYLOAD(tb[IFLA_HSR_PRP_SF_MC_ADDR]) < ETH_ALEN)
-		return;
-
-	if (tb[IFLA_HSR_PRP_SLAVE1])
-		print_string(PRINT_ANY,
-			     "slave1",
-			     "slave1 %s ",
-			     ll_index_to_name(rta_getattr_u32(tb[IFLA_HSR_PRP_SLAVE1])));
-	else
-		print_null(PRINT_ANY, "slave1", "slave1 %s ", "<none>");
-
-	if (tb[IFLA_HSR_PRP_SLAVE2])
-		print_string(PRINT_ANY,
-			     "slave2",
-			     "slave2 %s ",
-			     ll_index_to_name(rta_getattr_u32(tb[IFLA_HSR_PRP_SLAVE2])));
-	else
-		print_null(PRINT_ANY, "slave2", "slave2 %s ", "<none>");
-
-	if (tb[IFLA_HSR_PRP_SEQ_NR])
-		print_int(PRINT_ANY,
-			  "seq_nr",
-			  "sequence %d ",
-			  rta_getattr_u16(tb[IFLA_HSR_PRP_SEQ_NR]));
-
-	if (tb[IFLA_HSR_PRP_SF_MC_ADDR])
-		print_string(PRINT_ANY,
-			     "supervision_addr",
-			     "supervision %s ",
-			     ll_addr_n2a(RTA_DATA(tb[IFLA_HSR_PRP_SF_MC_ADDR]),
-					 RTA_PAYLOAD(tb[IFLA_HSR_PRP_SF_MC_ADDR]),
-					 ARPHRD_VOID,
-					 b1, sizeof(b1)));
+	return ret;
 }
 
 static void hsr_print_help(struct link_util *lu, int argc, char **argv,
@@ -152,6 +57,6 @@ struct link_util hsr_link_util = {
 	.id		= "hsr",
 	.maxattr	= IFLA_HSR_PRP_MAX,
 	.parse_opt	= hsr_parse_opt,
-	.print_opt	= hsr_print_opt,
+	.print_opt	= hsr_prp_print_opt,
 	.print_help	= hsr_print_help,
 };
diff --git a/ip/iplink_hsr_prp_common.c b/ip/iplink_hsr_prp_common.c
new file mode 100644
index 0000000..780c1cb
--- /dev/null
+++ b/ip/iplink_hsr_prp_common.c
@@ -0,0 +1,114 @@
+/*
+ * iplink_hsr_prp_common.c  Common utilities for hsr and prp
+ *
+ *		This program is free software; you can redistribute it and/or
+ *		modify it under the terms of the GNU General Public License
+ *		as published by the Free Software Foundation; either version
+ *		2 of the License, or (at your option) any later version.
+ *
+ * Authors:	Murali Karicheri <m-karicheri2@ti.com>
+ *
+ *
+ */
+
+#include "iplink_hsr_prp_common.h"
+
+int hsr_prp_parse_opt(bool hsr, struct link_util *lu, int argc, char **argv,
+		      struct nlmsghdr *n)
+{
+	int ifindex;
+	unsigned char multicast_spec;
+	unsigned char protocol_version;
+
+	while (argc > 0) {
+		if (matches(*argv, "supervision") == 0) {
+			NEXT_ARG();
+			if (get_u8(&multicast_spec, *argv, 0))
+				invarg("ADDR-BYTE is invalid", *argv);
+			addattr_l(n, 1024, IFLA_HSR_PRP_SF_MC_ADDR_LSB,
+				  &multicast_spec, 1);
+		} else if (hsr && matches(*argv, "version") == 0) {
+			NEXT_ARG();
+			if (!(get_u8(&protocol_version, *argv, 0) == 0 ||
+			      get_u8(&protocol_version, *argv, 0) == 1))
+				invarg("version is invalid", *argv);
+			addattr_l(n, 1024, IFLA_HSR_PRP_VERSION,
+				  &protocol_version, 1);
+		} else if (matches(*argv, "slave1") == 0) {
+			NEXT_ARG();
+			ifindex = ll_name_to_index(*argv);
+			if (ifindex == 0)
+				invarg("No such interface", *argv);
+			addattr_l(n, 1024, IFLA_HSR_PRP_SLAVE1, &ifindex, 4);
+		} else if (matches(*argv, "slave2") == 0) {
+			NEXT_ARG();
+			ifindex = ll_name_to_index(*argv);
+			if (ifindex == 0)
+				invarg("No such interface", *argv);
+			addattr_l(n, 1024, IFLA_HSR_PRP_SLAVE2, &ifindex, 4);
+		} else if (matches(*argv, "help") == 0) {
+			return -1;
+		} else {
+			if (hsr)
+				fprintf(stderr, "hsr: what is \"%s\"?\n", *argv);
+			else
+				fprintf(stderr, "prp: what is \"%s\"?\n", *argv);
+			return -1;
+		}
+		argc--, argv++;
+	}
+
+	return 0;
+}
+
+void hsr_prp_print_opt(struct link_util *lu, FILE *f, struct rtattr *tb[])
+{
+	SPRINT_BUF(b1);
+
+	if (!tb)
+		return;
+
+	if (tb[IFLA_HSR_PRP_SLAVE1] &&
+	    RTA_PAYLOAD(tb[IFLA_HSR_PRP_SLAVE1]) < sizeof(__u32))
+		return;
+	if (tb[IFLA_HSR_PRP_SLAVE2] &&
+	    RTA_PAYLOAD(tb[IFLA_HSR_PRP_SLAVE2]) < sizeof(__u32))
+		return;
+	if (tb[IFLA_HSR_PRP_SEQ_NR] &&
+	    RTA_PAYLOAD(tb[IFLA_HSR_PRP_SEQ_NR]) < sizeof(__u16))
+		return;
+	if (tb[IFLA_HSR_PRP_SF_MC_ADDR] &&
+	    RTA_PAYLOAD(tb[IFLA_HSR_PRP_SF_MC_ADDR]) < ETH_ALEN)
+		return;
+
+	if (tb[IFLA_HSR_PRP_SLAVE1])
+		print_string(PRINT_ANY,
+			     "slave1",
+			     "slave1 %s ",
+			     ll_index_to_name(rta_getattr_u32(tb[IFLA_HSR_PRP_SLAVE1])));
+	else
+		print_null(PRINT_ANY, "slave1", "slave1 %s ", "<none>");
+
+	if (tb[IFLA_HSR_PRP_SLAVE2])
+		print_string(PRINT_ANY,
+			     "slave2",
+			     "slave2 %s ",
+			     ll_index_to_name(rta_getattr_u32(tb[IFLA_HSR_PRP_SLAVE2])));
+	else
+		print_null(PRINT_ANY, "slave2", "slave2 %s ", "<none>");
+
+	if (tb[IFLA_HSR_PRP_SEQ_NR])
+		print_int(PRINT_ANY,
+			  "seq_nr",
+			  "sequence %d ",
+			  rta_getattr_u16(tb[IFLA_HSR_PRP_SEQ_NR]));
+
+	if (tb[IFLA_HSR_PRP_SF_MC_ADDR])
+		print_string(PRINT_ANY,
+			     "supervision_addr",
+			     "supervision %s ",
+			     ll_addr_n2a(RTA_DATA(tb[IFLA_HSR_PRP_SF_MC_ADDR]),
+					 RTA_PAYLOAD(tb[IFLA_HSR_PRP_SF_MC_ADDR]),
+					 ARPHRD_VOID,
+					 b1, sizeof(b1)));
+}
diff --git a/ip/iplink_hsr_prp_common.h b/ip/iplink_hsr_prp_common.h
new file mode 100644
index 0000000..a50bd7e
--- /dev/null
+++ b/ip/iplink_hsr_prp_common.h
@@ -0,0 +1,24 @@
+/*
+ * iplink_hsr_prp_common.h	HSR/PRP common header file
+ *
+ *		This program is free software; you can redistribute it and/or
+ *		modify it under the terms of the GNU General Public License
+ *		as published by the Free Software Foundation; either version
+ *		2 of the License, or (at your option) any later version.
+ *
+ * Authors:	Murali Karicheri <m-karicheri2@ti.com>
+ *
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/socket.h>  /* Needed by linux/if.h for some reason */
+#include <linux/if.h>
+#include <linux/if_arp.h>
+#include "rt_names.h"
+#include "utils.h"
+#include "ip_common.h"
+int hsr_prp_parse_opt(bool hsr, struct link_util *lu, int argc, char **argv,
+		      struct nlmsghdr *n);
+void hsr_prp_print_opt(struct link_util *lu, FILE *f, struct rtattr *tb[]);
diff --git a/ip/iplink_prp.c b/ip/iplink_prp.c
index 062c1c7..eff8a0d 100644
--- a/ip/iplink_prp.c
+++ b/ip/iplink_prp.c
@@ -11,15 +11,7 @@
  *		Based on iplink_hsr.c by Arvid Brodin <arvid.brodin@alten.se>
  */
 
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <sys/socket.h>  /* Needed by linux/if.h for some reason */
-#include <linux/if.h>
-#include <linux/if_arp.h>
-#include "rt_names.h"
-#include "utils.h"
-#include "ip_common.h"
+#include "iplink_hsr_prp_common.h"
 
 static void print_usage(FILE *f)
 {
@@ -44,92 +36,13 @@ static void usage(void)
 static int prp_parse_opt(struct link_util *lu, int argc, char **argv,
 			 struct nlmsghdr *n)
 {
-	int ifindex;
-	unsigned char multicast_spec;
+	int ret;
 
-	while (argc > 0) {
-		if (matches(*argv, "supervision") == 0) {
-			NEXT_ARG();
-			if (get_u8(&multicast_spec, *argv, 0))
-				invarg("ADDR-BYTE is invalid", *argv);
-			addattr_l(n, 1024, IFLA_HSR_PRP_SF_MC_ADDR_LSB,
-				  &multicast_spec, 1);
-		} else if (matches(*argv, "slave1") == 0) {
-			NEXT_ARG();
-			ifindex = ll_name_to_index(*argv);
-			if (ifindex == 0)
-				invarg("No such interface", *argv);
-			addattr_l(n, 1024, IFLA_HSR_PRP_SLAVE1, &ifindex, 4);
-		} else if (matches(*argv, "slave2") == 0) {
-			NEXT_ARG();
-			ifindex = ll_name_to_index(*argv);
-			if (ifindex == 0)
-				invarg("No such interface", *argv);
-			addattr_l(n, 1024, IFLA_HSR_PRP_SLAVE2, &ifindex, 4);
-		} else if (matches(*argv, "help") == 0) {
-			usage();
-			return -1;
-		} else {
-			fprintf(stderr, "prp: what is \"%s\"?\n", *argv);
-			usage();
-			return -1;
-		}
-		argc--, argv++;
-	}
+	ret = hsr_prp_parse_opt(false, lu, argc, argv, n);
+	if (ret < 0)
+		usage();
 
-	return 0;
-}
-
-static void prp_print_opt(struct link_util *lu, FILE *f, struct rtattr *tb[])
-{
-	SPRINT_BUF(b1);
-
-	if (!tb)
-		return;
-
-	if (tb[IFLA_HSR_PRP_SLAVE1] &&
-	    RTA_PAYLOAD(tb[IFLA_HSR_PRP_SLAVE1]) < sizeof(__u32))
-		return;
-	if (tb[IFLA_HSR_PRP_SLAVE2] &&
-	    RTA_PAYLOAD(tb[IFLA_HSR_PRP_SLAVE2]) < sizeof(__u32))
-		return;
-	if (tb[IFLA_HSR_PRP_SEQ_NR] &&
-	    RTA_PAYLOAD(tb[IFLA_HSR_PRP_SEQ_NR]) < sizeof(__u16))
-		return;
-	if (tb[IFLA_HSR_PRP_SF_MC_ADDR] &&
-	    RTA_PAYLOAD(tb[IFLA_HSR_PRP_SF_MC_ADDR]) < ETH_ALEN)
-		return;
-
-	if (tb[IFLA_HSR_PRP_SLAVE1])
-		print_string(PRINT_ANY,
-			     "slave1",
-			     "slave1 %s ",
-			     ll_index_to_name(rta_getattr_u32(tb[IFLA_HSR_PRP_SLAVE1])));
-	else
-		print_null(PRINT_ANY, "slave1", "slave1 %s ", "<none>");
-
-	if (tb[IFLA_HSR_PRP_SLAVE2])
-		print_string(PRINT_ANY,
-			     "slave2",
-			     "slave2 %s ",
-			     ll_index_to_name(rta_getattr_u32(tb[IFLA_HSR_SLAVE2])));
-	else
-		print_null(PRINT_ANY, "slave2", "slave2 %s ", "<none>");
-
-	if (tb[IFLA_HSR_PRP_SEQ_NR])
-		print_int(PRINT_ANY,
-			  "seq_nr",
-			  "sequence %d ",
-			  rta_getattr_u16(tb[IFLA_HSR_PRP_SEQ_NR]));
-
-	if (tb[IFLA_HSR_PRP_SF_MC_ADDR])
-		print_string(PRINT_ANY,
-			     "supervision_addr",
-			     "supervision %s ",
-			     ll_addr_n2a(RTA_DATA(tb[IFLA_HSR_PRP_SF_MC_ADDR]),
-					 RTA_PAYLOAD(tb[IFLA_HSR_PRP_SF_MC_ADDR]),
-					 ARPHRD_VOID,
-					 b1, sizeof(b1)));
+	return ret;
 }
 
 static void prp_print_help(struct link_util *lu, int argc, char **argv,
@@ -142,6 +55,6 @@ struct link_util prp_link_util = {
 	.id		= "prp",
 	.maxattr	= IFLA_HSR_PRP_MAX,
 	.parse_opt	= prp_parse_opt,
-	.print_opt	= prp_print_opt,
+	.print_opt	= hsr_prp_print_opt,
 	.print_help	= prp_print_help,
 };
-- 
2.7.4

