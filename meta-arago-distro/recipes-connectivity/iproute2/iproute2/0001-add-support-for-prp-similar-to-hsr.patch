From 8cce18533dff81eb72c07acb20775576b8bd2c25 Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Wed, 19 Sep 2018 16:41:30 -0400
Subject: [PATCH 1/4] add support for prp similar to hsr

prp protocol is similar to hsr in many aspects and this patch add a
command type prp to create prp interface using two slave interfaces
similar to hsr

Upstream-Status: Pending

Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
---
 include/uapi/linux/if_link.h |  14 ++++-
 ip/Makefile                  |   2 +-
 ip/iplink_prp.c              | 147 +++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 160 insertions(+), 3 deletions(-)
 create mode 100644 ip/iplink_prp.c

diff --git a/include/uapi/linux/if_link.h b/include/uapi/linux/if_link.h
index f4a9715..5a6d728 100644
--- a/include/uapi/linux/if_link.h
+++ b/include/uapi/linux/if_link.h
@@ -852,7 +852,6 @@ enum {
 
 
 /* HSR section */
-
 enum {
 	IFLA_HSR_UNSPEC,
 	IFLA_HSR_SLAVE1,
@@ -863,7 +862,6 @@ enum {
 	IFLA_HSR_VERSION,		/* HSR version */
 	__IFLA_HSR_MAX,
 };
-
 #define IFLA_HSR_MAX (__IFLA_HSR_MAX - 1)
 
 /* STATS section */
@@ -997,4 +995,16 @@ struct ifla_rmnet_flags {
 	__u32	mask;
 };
 
+/* PRP section */
+enum {
+	IFLA_PRP_UNSPEC,
+	IFLA_PRP_SLAVE1,
+	IFLA_PRP_SLAVE2,
+	IFLA_PRP_MULTICAST_SPEC,	/* Last byte of supervision addr */
+	IFLA_PRP_SUPERVISION_ADDR,	/* Supervision frame multicast addr */
+	IFLA_PRP_SEQ_NR,
+	__IFLA_PRP_MAX,
+};
+#define IFLA_PRP_MAX (__IFLA_PRP_MAX - 1)
+
 #endif /* _LINUX_IF_LINK_H */
diff --git a/ip/Makefile b/ip/Makefile
index a88f936..c0efc3a 100644
--- a/ip/Makefile
+++ b/ip/Makefile
@@ -8,7 +8,7 @@ IPOBJ=ip.o ipaddress.o ipaddrlabel.o iproute.o iprule.o ipnetns.o \
     iplink_macvlan.o ipl2tp.o link_vti.o link_vti6.o \
     iplink_vxlan.o tcp_metrics.o iplink_ipoib.o ipnetconf.o link_ip6tnl.o \
     link_iptnl.o link_gre6.o iplink_bond.o iplink_bond_slave.o iplink_hsr.o \
-    iplink_bridge.o iplink_bridge_slave.o ipfou.o iplink_ipvlan.o \
+    iplink_prp.o iplink_bridge.o iplink_bridge_slave.o ipfou.o iplink_ipvlan.o \
     iplink_geneve.o iplink_vrf.o iproute_lwtunnel.o ipmacsec.o ipila.o \
     ipvrf.o iplink_xstats.o ipseg6.o iplink_netdevsim.o iplink_rmnet.o
 
diff --git a/ip/iplink_prp.c b/ip/iplink_prp.c
new file mode 100644
index 0000000..46533e9
--- /dev/null
+++ b/ip/iplink_prp.c
@@ -0,0 +1,147 @@
+/*
+ * iplink_prp.c	PRP device support
+ *
+ *		This program is free software; you can redistribute it and/or
+ *		modify it under the terms of the GNU General Public License
+ *		as published by the Free Software Foundation; either version
+ *		2 of the License, or (at your option) any later version.
+ *
+ * Authors:	Murali Karicheri <m-karicheri2@ti.com>
+ *
+ *		Based on iplink_hsr.c by Arvid Brodin <arvid.brodin@alten.se>
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/socket.h>  /* Needed by linux/if.h for some reason */
+#include <linux/if.h>
+#include <linux/if_arp.h>
+#include "rt_names.h"
+#include "utils.h"
+#include "ip_common.h"
+
+static void print_usage(FILE *f)
+{
+	fprintf(f,
+"Usage:\tip link add name NAME type prp slave1 SLAVE1-IF slave2 SLAVE2-IF\n"
+"\t[ supervision ADDR-BYTE ]\n"
+"\n"
+"NAME\n"
+"	name of new prp device (e.g. prp0)\n"
+"SLAVE1-IF, SLAVE2-IF\n"
+"	the two slave devices bound to the PRP device\n"
+"ADDR-BYTE\n"
+"	0-255; the last byte of the multicast address used for PRP supervision\n"
+"	frames (default = 0)\n");
+}
+
+static void usage(void)
+{
+	print_usage(stderr);
+}
+
+static int prp_parse_opt(struct link_util *lu, int argc, char **argv,
+			 struct nlmsghdr *n)
+{
+	int ifindex;
+	unsigned char multicast_spec;
+
+	while (argc > 0) {
+		if (matches(*argv, "supervision") == 0) {
+			NEXT_ARG();
+			if (get_u8(&multicast_spec, *argv, 0))
+				invarg("ADDR-BYTE is invalid", *argv);
+			addattr_l(n, 1024, IFLA_PRP_MULTICAST_SPEC,
+				  &multicast_spec, 1);
+		} else if (matches(*argv, "slave1") == 0) {
+			NEXT_ARG();
+			ifindex = ll_name_to_index(*argv);
+			if (ifindex == 0)
+				invarg("No such interface", *argv);
+			addattr_l(n, 1024, IFLA_PRP_SLAVE1, &ifindex, 4);
+		} else if (matches(*argv, "slave2") == 0) {
+			NEXT_ARG();
+			ifindex = ll_name_to_index(*argv);
+			if (ifindex == 0)
+				invarg("No such interface", *argv);
+			addattr_l(n, 1024, IFLA_PRP_SLAVE2, &ifindex, 4);
+		} else if (matches(*argv, "help") == 0) {
+			usage();
+			return -1;
+		} else {
+			fprintf(stderr, "prp: what is \"%s\"?\n", *argv);
+			usage();
+			return -1;
+		}
+		argc--, argv++;
+	}
+
+	return 0;
+}
+
+static void prp_print_opt(struct link_util *lu, FILE *f, struct rtattr *tb[])
+{
+	SPRINT_BUF(b1);
+
+	if (!tb)
+		return;
+
+	if (tb[IFLA_PRP_SLAVE1] &&
+	    RTA_PAYLOAD(tb[IFLA_PRP_SLAVE1]) < sizeof(__u32))
+		return;
+	if (tb[IFLA_PRP_SLAVE2] &&
+	    RTA_PAYLOAD(tb[IFLA_PRP_SLAVE2]) < sizeof(__u32))
+		return;
+	if (tb[IFLA_PRP_SEQ_NR] &&
+	    RTA_PAYLOAD(tb[IFLA_PRP_SEQ_NR]) < sizeof(__u16))
+		return;
+	if (tb[IFLA_PRP_SUPERVISION_ADDR] &&
+	    RTA_PAYLOAD(tb[IFLA_PRP_SUPERVISION_ADDR]) < ETH_ALEN)
+		return;
+
+	if (tb[IFLA_PRP_SLAVE1])
+		print_string(PRINT_ANY,
+			     "slave1",
+			     "slave1 %s ",
+			     ll_index_to_name(rta_getattr_u32(tb[IFLA_PRP_SLAVE1])));
+	else
+		print_null(PRINT_ANY, "slave1", "slave1 %s ", "<none>");
+
+	if (tb[IFLA_PRP_SLAVE2])
+		print_string(PRINT_ANY,
+			     "slave2",
+			     "slave2 %s ",
+			     ll_index_to_name(rta_getattr_u32(tb[IFLA_HSR_SLAVE2])));
+	else
+		print_null(PRINT_ANY, "slave2", "slave2 %s ", "<none>");
+
+	if (tb[IFLA_PRP_SEQ_NR])
+		print_int(PRINT_ANY,
+			  "seq_nr",
+			  "sequence %d ",
+			  rta_getattr_u16(tb[IFLA_PRP_SEQ_NR]));
+
+	if (tb[IFLA_PRP_SUPERVISION_ADDR])
+		print_string(PRINT_ANY,
+			     "supervision_addr",
+			     "supervision %s ",
+			     ll_addr_n2a(RTA_DATA(tb[IFLA_PRP_SUPERVISION_ADDR]),
+					 RTA_PAYLOAD(tb[IFLA_PRP_SUPERVISION_ADDR]),
+					 ARPHRD_VOID,
+					 b1, sizeof(b1)));
+}
+
+static void prp_print_help(struct link_util *lu, int argc, char **argv,
+	FILE *f)
+{
+	print_usage(f);
+}
+
+struct link_util prp_link_util = {
+	.id		= "prp",
+	.maxattr	= IFLA_PRP_MAX,
+	.parse_opt	= prp_parse_opt,
+	.print_opt	= prp_print_opt,
+	.print_help	= prp_print_help,
+};
-- 
2.7.4

